//------------------------------------------------------------------------------
// <auto-generated>
//    Este código se generó a partir de una plantilla.
//
//    Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//    Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfServiceOLO
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class OLOEntities : DbContext
    {
        public OLOEntities()
            : base("name=OLOEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual int GrabaBillingWS(string iDOLOPV, string iDOLOUsuario, Nullable<System.DateTime> fechaVenta, Nullable<int> iDCliente, Nullable<int> iDTipoDocumento, string numDocumentoCliente, string nombreCliente, Nullable<System.DateTime> fNacCliente, Nullable<int> iDGeneroCliente, string ocupacionCliente, string nacionalidadCliente, string direccionCliente, Nullable<int> iDProvincia, string provinciaCliente, Nullable<int> iDDistritoCliente, string distritoCliente, string telefonoCliente, string celular1Cliente, string celular2Cliente, string eMailCliente, string desTipoDispositivo, string mAC, Nullable<int> iDPlan, string desPlan, Nullable<int> iDTipoVenta, Nullable<decimal> importe)
        {
            var iDOLOPVParameter = iDOLOPV != null ?
                new ObjectParameter("IDOLOPV", iDOLOPV) :
                new ObjectParameter("IDOLOPV", typeof(string));
    
            var iDOLOUsuarioParameter = iDOLOUsuario != null ?
                new ObjectParameter("IDOLOUsuario", iDOLOUsuario) :
                new ObjectParameter("IDOLOUsuario", typeof(string));
    
            var fechaVentaParameter = fechaVenta.HasValue ?
                new ObjectParameter("FechaVenta", fechaVenta) :
                new ObjectParameter("FechaVenta", typeof(System.DateTime));
    
            var iDClienteParameter = iDCliente.HasValue ?
                new ObjectParameter("IDCliente", iDCliente) :
                new ObjectParameter("IDCliente", typeof(int));
    
            var iDTipoDocumentoParameter = iDTipoDocumento.HasValue ?
                new ObjectParameter("IDTipoDocumento", iDTipoDocumento) :
                new ObjectParameter("IDTipoDocumento", typeof(int));
    
            var numDocumentoClienteParameter = numDocumentoCliente != null ?
                new ObjectParameter("NumDocumentoCliente", numDocumentoCliente) :
                new ObjectParameter("NumDocumentoCliente", typeof(string));
    
            var nombreClienteParameter = nombreCliente != null ?
                new ObjectParameter("NombreCliente", nombreCliente) :
                new ObjectParameter("NombreCliente", typeof(string));
    
            var fNacClienteParameter = fNacCliente.HasValue ?
                new ObjectParameter("FNacCliente", fNacCliente) :
                new ObjectParameter("FNacCliente", typeof(System.DateTime));
    
            var iDGeneroClienteParameter = iDGeneroCliente.HasValue ?
                new ObjectParameter("IDGeneroCliente", iDGeneroCliente) :
                new ObjectParameter("IDGeneroCliente", typeof(int));
    
            var ocupacionClienteParameter = ocupacionCliente != null ?
                new ObjectParameter("OcupacionCliente", ocupacionCliente) :
                new ObjectParameter("OcupacionCliente", typeof(string));
    
            var nacionalidadClienteParameter = nacionalidadCliente != null ?
                new ObjectParameter("NacionalidadCliente", nacionalidadCliente) :
                new ObjectParameter("NacionalidadCliente", typeof(string));
    
            var direccionClienteParameter = direccionCliente != null ?
                new ObjectParameter("DireccionCliente", direccionCliente) :
                new ObjectParameter("DireccionCliente", typeof(string));
    
            var iDProvinciaParameter = iDProvincia.HasValue ?
                new ObjectParameter("IDProvincia", iDProvincia) :
                new ObjectParameter("IDProvincia", typeof(int));
    
            var provinciaClienteParameter = provinciaCliente != null ?
                new ObjectParameter("ProvinciaCliente", provinciaCliente) :
                new ObjectParameter("ProvinciaCliente", typeof(string));
    
            var iDDistritoClienteParameter = iDDistritoCliente.HasValue ?
                new ObjectParameter("IDDistritoCliente", iDDistritoCliente) :
                new ObjectParameter("IDDistritoCliente", typeof(int));
    
            var distritoClienteParameter = distritoCliente != null ?
                new ObjectParameter("DistritoCliente", distritoCliente) :
                new ObjectParameter("DistritoCliente", typeof(string));
    
            var telefonoClienteParameter = telefonoCliente != null ?
                new ObjectParameter("TelefonoCliente", telefonoCliente) :
                new ObjectParameter("TelefonoCliente", typeof(string));
    
            var celular1ClienteParameter = celular1Cliente != null ?
                new ObjectParameter("Celular1Cliente", celular1Cliente) :
                new ObjectParameter("Celular1Cliente", typeof(string));
    
            var celular2ClienteParameter = celular2Cliente != null ?
                new ObjectParameter("Celular2Cliente", celular2Cliente) :
                new ObjectParameter("Celular2Cliente", typeof(string));
    
            var eMailClienteParameter = eMailCliente != null ?
                new ObjectParameter("eMailCliente", eMailCliente) :
                new ObjectParameter("eMailCliente", typeof(string));
    
            var desTipoDispositivoParameter = desTipoDispositivo != null ?
                new ObjectParameter("DesTipoDispositivo", desTipoDispositivo) :
                new ObjectParameter("DesTipoDispositivo", typeof(string));
    
            var mACParameter = mAC != null ?
                new ObjectParameter("MAC", mAC) :
                new ObjectParameter("MAC", typeof(string));
    
            var iDPlanParameter = iDPlan.HasValue ?
                new ObjectParameter("IDPlan", iDPlan) :
                new ObjectParameter("IDPlan", typeof(int));
    
            var desPlanParameter = desPlan != null ?
                new ObjectParameter("DesPlan", desPlan) :
                new ObjectParameter("DesPlan", typeof(string));
    
            var iDTipoVentaParameter = iDTipoVenta.HasValue ?
                new ObjectParameter("IDTipoVenta", iDTipoVenta) :
                new ObjectParameter("IDTipoVenta", typeof(int));
    
            var importeParameter = importe.HasValue ?
                new ObjectParameter("Importe", importe) :
                new ObjectParameter("Importe", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GrabaBillingWS", iDOLOPVParameter, iDOLOUsuarioParameter, fechaVentaParameter, iDClienteParameter, iDTipoDocumentoParameter, numDocumentoClienteParameter, nombreClienteParameter, fNacClienteParameter, iDGeneroClienteParameter, ocupacionClienteParameter, nacionalidadClienteParameter, direccionClienteParameter, iDProvinciaParameter, provinciaClienteParameter, iDDistritoClienteParameter, distritoClienteParameter, telefonoClienteParameter, celular1ClienteParameter, celular2ClienteParameter, eMailClienteParameter, desTipoDispositivoParameter, mACParameter, iDPlanParameter, desPlanParameter, iDTipoVentaParameter, importeParameter);
        }
    }
}
